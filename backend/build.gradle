plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'ssacretary'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
	implementation 'org.jsoup:jsoup:1.14.2'
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.awaitility:awaitility:3.1.2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	/* JWT 설정 */
	implementation group: 'com.auth0', name: 'java-jwt', version: '3.18.1'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.10.7')

	implementation("io.springfox:springfox-swagger2:3.0.0")
	implementation("io.springfox:springfox-swagger-ui:3.0.0")
	implementation("io.springfox:springfox-data-rest:3.0.0")
	implementation("io.springfox:springfox-bean-validators:3.0.0")
	implementation("io.springfox:springfox-boot-starter:3.0.0")

	implementation("com.google.guava:guava:29.0-jre")
	annotationProcessor("com.google.guava:guava:29.0-jre")

	implementation 'commons-io:commons-io:2.8.0'
	implementation 'commons-fileupload:commons-fileupload:1.4'

	implementation 'com.querydsl:querydsl-jpa'

	/* Redis */
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	compile('org.springframework.boot:spring-boot-starter-data-redis')
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

test {
	useJUnitPlatform()
}
